name: Release (Build and Upload EXE)

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

# Ensure the workflow token can create/update releases and upload assets
permissions:
  contents: write

jobs:
  build-windows-exe:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check tag matches __version__
        shell: pwsh
        run: |
          $tag = $env:GITHUB_REF_NAME
          if (-not $tag) { Write-Error 'GITHUB_REF_NAME is empty'; exit 1 }
          if ($tag.StartsWith('v')) { $tag = $tag.Substring(1) }
          $path = 'src/ocr_true_scaling.py'
          if (-not (Test-Path $path)) { Write-Error "Missing $path"; exit 1 }
          $content = Get-Content -Raw -Path $path -Encoding UTF8
          $m = [regex]::Match($content, '__version__\s*=\s*"([0-9]+\.[0-9]+\.[0-9]+)"')
          if (-not $m.Success) { Write-Error 'Could not parse __version__'; exit 1 }
          $ver = $m.Groups[1].Value
          if ($ver -ne $tag) {
            Write-Error "Tag ($env:GITHUB_REF_NAME) does not match __version__ ($ver)"; exit 1
          }
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build EXE (onefile)
        shell: pwsh
        run: |
          powershell -ExecutionPolicy Bypass -File scripts\build_exe.ps1 -OneFile
      - name: Locate EXE
        id: find_exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Filter "ocr_true_scaling*.exe" dist | Select-Object -First 1
          if (-not $exe) { Write-Error "EXE not found under dist/"; exit 1 }
          echo "exe_path=$($exe.FullName)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Smoke run EXE (-V)
        shell: pwsh
        env:
          OCR_TS_SKIP_IMPORTS: '1'
        run: |
          & "${{ steps.find_exe.outputs.exe_path }}" -V
      - name: Prepare artifacts (rename + SHA256)
        id: prep
        shell: pwsh
        run: |
          $version = '${{ github.ref_name }}'
          $name = "ocr_true_scaling-$version-windows-x64.exe"
          $outDir = Join-Path (Get-Location) 'dist/release'
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $dst = Join-Path $outDir $name
          Copy-Item -Force "${{ steps.find_exe.outputs.exe_path }}" $dst
          $hash = (Get-FileHash -Algorithm SHA256 $dst).Hash
          $hashFile = Join-Path $outDir ($name + '.sha256')
          "$hash *$name" | Out-File -FilePath $hashFile -Encoding ASCII
          echo "artifact=$dst" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "sha256=$hashFile" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Determine release notes file
        id: notes
        shell: pwsh
        run: |
          $name = "RELEASE_NOTES_${{ github.ref_name }}.md"
          if (Test-Path $name) {
            echo "notes_path=$name" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
      # Prefer a fine-grained PAT if provided (repo secret: GH_RELEASE_TOKEN)
      - name: Upload to Release (with notes, PAT)
        if: steps.notes.outputs.notes_path != '' && secrets.GH_RELEASE_TOKEN != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          files: |
            ${{ steps.prep.outputs.artifact }}
            ${{ steps.prep.outputs.sha256 }}
          token: ${{ secrets.GH_RELEASE_TOKEN }}
      - name: Upload to Release (auto notes, PAT)
        if: steps.notes.outputs.notes_path == '' && secrets.GH_RELEASE_TOKEN != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            ${{ steps.prep.outputs.artifact }}
            ${{ steps.prep.outputs.sha256 }}
          token: ${{ secrets.GH_RELEASE_TOKEN }}

      # Fallback to GITHUB_TOKEN (requires repo Setting → Actions → Workflow permissions: Read and write)
      - name: Upload to Release (with notes, GITHUB_TOKEN)
        if: steps.notes.outputs.notes_path != '' && (secrets.GH_RELEASE_TOKEN == '')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          files: |
            ${{ steps.prep.outputs.artifact }}
            ${{ steps.prep.outputs.sha256 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload to Release (auto notes, GITHUB_TOKEN)
        if: steps.notes.outputs.notes_path == '' && (secrets.GH_RELEASE_TOKEN == '')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            ${{ steps.prep.outputs.artifact }}
            ${{ steps.prep.outputs.sha256 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
